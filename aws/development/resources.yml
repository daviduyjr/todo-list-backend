Resources:
    # Relational DB
    SubnetGroup:
        Type: 'AWS::RDS::DBSubnetGroup'
        Properties:
            DBSubnetGroupDescription: Subnet group for aurora postgres serverless
            DBSubnetGroupName: ${self:service}-${sls:stage}-aurora-subnet-grp
            SubnetIds:
                - !Ref DbSubnet
                - !Ref PublicSubnet
    # Networking
    AppVpc:
        Type: 'AWS::EC2::VPC'
        Properties:
            CidrBlock: 10.0.0.0/16
            Tags:
                - Key: Name
                  Value: ${self:service}-${sls:stage}
            EnableDnsHostnames: true
    ## Subnets
    DbSubnet:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref AppVpc
            CidrBlock: 10.0.0.0/24
            Tags:
                - Key: Name
                  Value: ${self:service}-${sls:stage}-databases
            AvailabilityZone:
                Fn::Select:
                    - 0
                    - Fn::GetAZs:
                          Ref: AWS::Region
    PublicSubnet:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref AppVpc
            CidrBlock: 10.0.32.0/24
            Tags:
                - Key: Name
                  Value: ${self:service}-${sls:stage}-public
            AvailabilityZone:
                Fn::Select:
                    - 1
                    - Fn::GetAZs:
                          Ref: AWS::Region
    AppElasticIp:
        Type: 'AWS::EC2::EIP'
    InternetGateway:
        Type: 'AWS::EC2::InternetGateway'
        Properties:
            Tags:
                - Key: Name
                  Value: ${self:service}-${sls:stage}-internet-gateway
    VpcInternetGateway:
        Type: 'AWS::EC2::VPCGatewayAttachment'
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref AppVpc
    # Route Tables
    PublicRouteTable:
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId: !Ref AppVpc
            Tags:
                - Key: Name
                  Value: ${self:service}-${sls:stage}-public-route-table
    PublicTraffic:
        Type: 'AWS::EC2::Route'
        Properties:
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
            RouteTableId: !Ref PublicRouteTable
    PublicSubnetAssoc:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet
    DbSubnetAssoc:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref DbSubnet
    # Security Groups
    # Remove SecurityGroupEgress in production?
    PostgresSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupName: ${self:service}-${sls:stage}-psql-sec-grp
            GroupDescription: 'Set of rules for RDS postgres'
            VpcId: !Ref AppVpc
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 5432
                  ToPort: 5432
                  CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                - IpProtocol: -1
                  CidrIp: 0.0.0.0/0